//
//   GKGroups.cpp
//  sigma
//
//  Created by David Gray on 04/02/2018.
//  Copyright Â© 2018 formal. All rights reserved.
//

#include "GKGroups.hpp"

namespace GK {
    
    const GK::Generators<Number,Element> one(Element("5700020286104706034470723325368756212265165559670145796884264302728301372668822323517071656326495166230834415530028582370786059108792990835778276233613497"),
                                             Element("8966348322580578445509753644175882381829365720385075813043945079972141586058155734538632767552936974127160213921528257114003971778165777942122960449063415"));
    
    
    
    //  const GK::Generators<Number,Element> one(Element("30719382"),
    //                                           Element("44408788"));
    
    
    const GK::Generators<Number,Element> two(Element("2817485691260191313397097927932204648622604098051964222662232900536254556073076161482288360134573056185876156226618362748195733585838541927023288820494398"),
                                             Element("11334020256839357404720860712228273620751582249573831273483217820394974416984048587665478336769302058840710366391696476322034401641217557399071736333721055"));
    
    ECGroupElement G("9216064434961179932092223867844635691966339998754536116709681652691785432045",
                     "33986433546870000256104618635743654523665060392313886665479090285075695067131");
    
    ECGroupElement H("50204771751011461524623624559944050110546921468100198079190811223951215371253",
                     "71960464583475414858258501028406090652116947054627619400863446545880957517934");
    
    const GK::Generators<ECScalar,ECGroupElement> three(G,H);
    
    
    
    
    
    
    
    
    
    
    
    void displayGenerators() {
        std::cerr << "Generators one : \n" << one << std::endl;
        std::cerr << "Generators two : \n" << two << std::endl;
        std::cerr << "Generators three : \n" << two << std::endl;
    }
    
}

